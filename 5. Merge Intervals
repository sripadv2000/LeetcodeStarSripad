5) Merge Intervals
   P: https://leetcode.com/problems/merge-intervals/
	Method-1: TC: O(NlogN)+	O(n^2)
Ask the interviewer if the intervals are sorted, if not, we sort the list based on first index. 
A simple approach is to start from the first interval and compare it with all other intervals for overlapping, 
if it overlaps with any other interval, 
then remove the other interval from the list and merge the other into the first interval. 
Repeat the same steps for remaining intervals after first. 
This approach cannot be implemented in better than O(n^2) time.

	Method-2: TC: O(NlogN); SC: O(N)
First, we sort the list based on first index as described. 
Then, we insert the first interval into our merged list and continue considering each interval in turn as follows: 
If the current interval begins after the previous interval ends, 
then they do not overlap and we can append the current interval to merged. 
Otherwise, they do overlap, and we merge them by updating the end of the previous interval if it is less than the end of the current interval.
Code:
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # if the list of merged intervals is empty or if the current
            # interval does not overlap with the previous, simply append it.
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
            # otherwise, there is overlap, so we merge the current and previous
            # intervals.
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged
