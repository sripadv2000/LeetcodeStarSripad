42) N meetings In One Room | Greedy Algorithm
P: https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1
Sol: https://www.geeksforgeeks.org/find-maximum-meetings-in-one-room/

Given the start and finish arrays 1 based indexing.
Make a list of lists (S[i],F[i],i)
Sort the vectors based on the finish time.
If the task is small,i.e sooner the meeting finishes, 
many tasks can be accommodated in the meeting room.
If 2 meetings have same finish time, then irrespective of the start time,
sort the meetings in order of their position.
We can also get the order in which the meetings occur since we use indexing.
TC: O(N)+O(NlogN)+O(N)		SC: O(N)
For traversing the start and finish arrays and keeping them in a DS.
+
For sorting the tasks in DS based on their finish time.
+
Traverse the DS to find the maximum number of meetings.
Code:
class meeting:
    def __init__(self, start, end, pos):
        self.start = start
        self.end = end
        self.pos = pos
def maxMeeting(l, n):
    ans = []
    l.sort(key=lambda x: x.end)
    ans.append(l[0].pos)
    time_limit = l[0].end
    for i in range(1, n):
        if l[i].start > time_limit:
            ans.append(l[i].pos)
            time_limit = l[i].end
    for i in ans:
        print(i + 1, end=" ")
    print()
if __name__ == '__main__':
    s = [1, 3, 0, 5, 8, 5]
    f = [2, 4, 6, 7, 9, 9]
    n = len(s)
    l = []
    for i in range(n):
        l.append(meeting(s[i], f[i], i))
    maxMeeting(l, n)
