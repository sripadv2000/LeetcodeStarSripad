3) Efficiently merging two sorted arrays(l1,l2) with O(1) extra space.
   P: https://www.geeksforgeeks.org/efficiently-merging-two-sorted-arrays-with-o1-extra-space/
	Method-1: Take another array of size m+n where m=len(l1) and n=len(l2).
	And fill the array with elemets of l1 and l2 and sort the array.
	Again using the sorted array elements, fill back the lists l1 and l2.
	TC: O((M+N)logM+N)+O(M)+O(N) ; SC: O(M+N)
	Code:
l1= [1,4,7,8,10]
l2= [2,3,9]
l3=sorted(l1+l2)
for i in range(len(l1)):
    l1[i]=l3[i]
for i in range(len(l2)):
    l2[i]=l3[len(l1)+i]
print(l1)
print(l2)
	Method-2:
	If interviewer tells that I cannot use extra space, then there is an Insertion sort kinda algo.
	Both the arrays are already sorted(given).
	So it is like traversing both arrays and swapping if element in l2<l1;
	After swap, we again have to sort the l2 array. It is almost like after every swap, we are sorting the l2 array.
	This works but it has a TC:O(M*N) Quadratic; SC: O(1).
	If we want to do this in constant space, then only quadratic solution is possible.
	Sol: https://www.techiedelight.com/inplace-merge-two-sorted-arrays/
	
	Method-3: 
	GAP Method TC:O(NlogN) ; SC: O(1).
	gap= ceil[(m+n)/2]
	For every iteration, compare arr[i] with arr[i+gap]; if arr[i] is greater, then swap the elements. Iterate till last.
	then gap=gap/2 and again perform the above operation of comparing and swapping.
	Perform this till gap becomes 1.
	TC:O(NlogN) 
    the number of times I perform the GAP operations = logN to the base 2
    and for every operation, we are linearly iterating, so NlogN.
