62) Median of Row Wise Sorted Matrix | Nested Binary Search
P: https://www.interviewbit.com/problems/matrix-median/

Given a matrix of integers A of size N x M in which each row is sorted.
Find an return the overall median of the matrix A.

Constraints:
1 <= N, M <= 10^5
1 <= N*M  <= 10^6
1 <= A[i] <= 10^9
N*M is odd

Method-1: Naive Approach; TC:O(N*M)+O((N*M)log(N*M)); SC:O(N*M)
Take an array of size (N x M) and insert all the elements of the matrix into tha array.
Sort the array in increasing order.
Return the middlemost element of the array.
The interviewer will not be happy as we are using an extra space for the array.

We use BS because it is a method to find an element in the sorted array.
BS can be implemented on any search space which is monotonic in nature.
Since 1 <= A[i] <= 10^9, the search space is from 1 to 10^9. Our median lies anywhere in that range.

Method-2: TC: log(2**32) to the base 2 * N * logM = 32*N*logM
SC: O(1)
An efficient approach for this problem is to use a binary search algorithm. 
The idea is that for a number to be median there should be exactly (n/2) numbers which are less than this number. 
So, we try to find the count of numbers less than all the numbers.

Algorithm:
1. First, we find the minimum and maximum elements in the matrix. 
The minimum element can be easily found by comparing the first element of each row, 
and similarly, the maximum element can be found by comparing the last element of each row.
2. Then we use binary search on our range of numbers from minimum to maximum, 
we find the mid of the min and max and get a count of numbers less than our mid. 
And accordingly change the min or max.
To get the count of elements less than the median, we again use binary search on each row of the matrix.
3. For a number to be median, there should be (N*M)/2 numbers smaller than that number. 
So for every number, we get the count of numbers less than that by using upper_bound() 
in each row of the matrix, if it is less than the required count, 
the median must be greater than the selected number, else the median must be less than or equal to the selected number.
Code:
def countSmallerThanEqualToMid(row,mid):
    l=0
    h=len(row)-1
    while(l<=h):
        md=(l+h)//2;
        if(row[md] <= mid):
            l=md+1
        else:
            h=md-1
    return l

def findMedian(A):
    low=1
    high=1e9
    n=len(A)
    m=len(A[0])
    while(low<=high):
        mid=(low+high)//2;
        cnt=0 #<=mid
        for i in range(n):
            cnt+=countSmallerThanEqualToMid(A[i],mid);

        if(cnt <= (n*m)/2):
            low=mid+1
        else:
            high=mid-1
    return low

A = [   [1, 3, 5],
            [2, 6, 9],
            [3, 6, 9]   ]
print(findMedian(A))

O/P: 5.0
