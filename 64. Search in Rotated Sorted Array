64) Search in Rotated Sorted Array
P: https://leetcode.com/problems/search-in-rotated-sorted-array/
Sol: https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/

Method-1: Linear Search in the Array. TC:O(n); SC:O(1)
 
Method-2: 
1) low at 0, high at (n-1), compute mid.
   Find middle point mid = (low + high)/2
2) If ar[mid]==target, return mid.
3) Else If arr[l..mid] is sorted(Left half is sorted if ar[low]<=ar[mid])
    a) If key to be searched lies in range from arr[l]
       to arr[mid], recur for arr[low..mid].
    b) Else recur for arr[mid+1..high]
4) Else (arr[mid+1..high] must be sorted)
    a) If key to be searched lies in range from arr[mid+1]
       to arr[high], recur for arr[mid+1..high].
    b) Else recur for arr[low..mid]
Code:
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        low=0
        high=len(nums)-1
        while(low<=high):
            mid = low + (high-low)//2
            if(nums[mid]==target):
                return mid
            
            # the left side is sorted
            if(nums[low]<=nums[mid]):
                if(target>=nums[low] and target<=nums[mid]):
                    high=mid-1
                else:
                    low=mid+1
            else:
                if(target>=nums[mid] and target<=nums[high]):
                    low=mid+1
                else:
                    high=mid-1
        return -1
