8) PASCAL Triangle
   P: https://leetcode.com/problems/pascals-triangle/
	i) If the question is, given R(row) and C(column), print the element at matrix[R][C], it it (R-1)^Combination_(C-1).
for(int i=0; i<k; ++i){
    res *= (n-i);
    res /= (i+1);
} #can be used to compute nCr in O(n) complexity.
	TC: O(n); SC: O(1) ;Because we need to compute factorial for binomial coefficient.

	ii) If the question is, given R(row) number, print the whole row,
	check out the YT video for explanation. TC: O(n); SC: O(n)

	iii) If the question is, given R(row) number, print the whole Pascal Triangle,
	Dynamic Programming is used; TC: O(n^2); SC: O(n^2).
Code:
class Solution:
    def generate(self, num_rows):
        triangle = []

        for row_num in range(num_rows):
            # The first and last row elements are always 1.
            row = [None for _ in range(row_num+1)]
            row[0], row[-1] = 1, 1

            # Each triangle element is equal to the sum of the elements
            # above-and-to-the-left and above-and-to-the-right.
            for j in range(1, len(row)-1):
                row[j] = triangle[row_num-1][j-1] + triangle[row_num-1][j]

            triangle.append(row)

        return triangle

Code:
# Python3 program for Pascal's Triangle
# A O(n^2) time and O(1) extra
# space method for Pascal's Triangle

# Pascal function
def printPascal(n):
	for line in range(1, n + 1):
		C = 1; # used to represent C(line, i)
		for i in range(1, line + 1):
			
			# The first value in a
			# line is always 1
			print(C, end = " ");
			C = int(C * (line - i) / i);
		print("");

# Driver code
n = 5;
printPascal(n);
