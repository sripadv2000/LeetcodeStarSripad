37) Rotate a LinkedList
    P: https://leetcode.com/problems/rotate-list/

Method-1: Take the last node and keep it at the first. Repeat this for k times.
TC: O(k*n); SC: O(1)
# n time to calculate the last node and do this k times.

Method-2:
TC: O(n)+O(n-(n%k)) == O(n); SC: O(1)
Find length of LL by using curr. curr is pointing to last node. Then point the last node(curr) to head. 
This becomes circular LL.
Move head and curr by (length-k) times. And point curr to None.
Code:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        # edge cases
        if(head==None or head.next==None or k==0):
            return head
        #compute the length
        curr = head
        count = 1
        while(curr.next!=None):
            count+=1
            curr = curr.next
        #go till that node
        curr.next = head
        k = k%count
        k = count-k
        while(k):
            curr = curr.next
            k-=1
        head = curr.next
        curr.next = None
        return head
