Input Format:
Input n,m: n is number of nodes in the graph and m is number of edges.
m lines of u,v input follows.
By taking n nodes and joining all the m inputs, an undirected graph is formed.

The way to store a graph in a DS is to use an Adjacency Matrix.
Adjacency Matrix:
Adjacency Matrix is a 2D array of size V x V where V is the number of vertices in a graph. 
Let the 2D array be adj[][], a slot adj[i][j] = 1 indicates that there is an edge from vertex i to vertex j. 
Adjacency matrix for undirected graph is always symmetric. Adjacency Matrix is also used to represent weighted graphs. 
If adj[i][j] = w, then there is an edge from vertex i to vertex j with weight w. 

If it is a 1-based indexing, then take an array of (V+1)*(V+1) size.
For every input u,v , mark adj[u][v] = 1 and adj[v][u] = 1
Code:
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n,m;
    cin >> n >> m;
    //declare the adjacency matrix
    int adj[n+1][n+1];
    
    //take edges as input
    for(int i=0; i<m; i++){
        int u,v;
        cin >> u >> v;
        adj[u][v] = 1;
        adj[v][u] = 1;
    }
    return 0;
}
We can only use Adjacency Matrix for smaller values of n.
If the matrix is of size 10e5, then we cannot create a matrix of such huge size.
Advantagess of using an Adjacency Matrix: Easy to use and follow. Removing an edge takes O(1) time.
Queries like whether there is an edge from vertex ‘u’ to vertex ‘v’ are efficient and can be done O(1).
Cons: Consumes more space O(V^2). Even if the graph is sparse(contains less number of edges), it consumes the same space. Adding a vertex is O(V^2) time.

Adjacency List
An array of lists is used. The size of the array is equal to the number of vertices.
Let the array be an array[]. An entry array[i] represents the list of vertices adjacent to the ith vertex.
we use dynamic arrays (vector in C++/ArrayList in Java) to represent adjacency lists instead of the linked list.
Pros: Saves space O(|V|+|E|) . In the worst case, there can be C(V, 2) number of edges in a graph thus consuming O(V^2) space. Adding a vertex is easier.
Cons: Queries like whether there is an edge from vertex u to vertex v are not efficient and can be done O(V).
Code for undirected graph:
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n,m;
    cin >> n >> m;
    
    //declare the adjacency list
    vector<int> adj[n+1];
    
    for(int i=0; i<m; i++){
        int u,v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    return 0;
}
