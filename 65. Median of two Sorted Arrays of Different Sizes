65) Median of two Sorted Arrays of Different Sizes | Binary Search
P: https://leetcode.com/problems/median-of-two-sorted-arrays/

Method-1: BruteForce Solution TC: O(n1+n2); SC: O(n1+n2)
Code:
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = (nums1+nums2)
        n = len(nums)
        nums.sort()
        if(n%2 == 1):
            return nums[n//2]
        else:
            return (nums[n//2 - 1] + nums[n//2])/2

Method-2: 
Using BS and variables cut1,cut2,l1,l2,r1,r2.
cut1 = (low+high)/2
cut2 = (n1+n2)/2 - cut1
l1=arr1[cut1-1]; r1=arr1[cut1]
l2=arr2[cut2-1]; r2=arr2[cut2]

Median = (max(l1,l2)+min(r1,r2))/2
So if we are not taking any of l1 and l2, point them to INT_MIN.
If we are not taking any of r1 and r2, point them to INT_MAX.
Code:
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if(len(nums1)>len(nums2)):
            return self.findMedianSortedArrays(nums2, nums1)
        n1 = len(nums1)
        n2 = len(nums2)
        low=0
        high=n1
        while(low<=high):
            cut1 = (low+high)>>1
            cut2 = (n1+n2+1)//2 - cut1
            # -10^6 <= nums1[i], nums2[i] <= 10^6
            intmin = -10**6
            intmax = 10**6
            left1 = intmin if cut1==0 else nums1[cut1-1]
            left2 = intmin if cut2==0 else nums2[cut2-1]
            
            right1 = intmax if cut1==n1 else nums1[cut1]
            right2 = intmax if cut2==n2 else nums2[cut2]
            if(left1<=right2 and left2<=right1):
                if((n1+n2)%2 == 0):
                    return (max(left1,left2)+min(right1,right2))/2
                else:
                    return max(left1,left2)
            elif(left1>right2):
                high=cut1-1
            else:
                low=cut1+1
        return 0.0
