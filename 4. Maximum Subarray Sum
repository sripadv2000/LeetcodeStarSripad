4) Maximum Subarray Sum.
   P: https://leetcode.com/problems/maximum-subarray/
      https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/

	Method-1: Tell the O(n^3) solution.
	Iterate through all the sub arrays and find out the maximum sum subarray.
Pseudo Code:
for i in range(0,n):
    for j in range(i,n):
        for k in range(i,j):
            sum+=arr[i]
            maxi=max(maxi,sum)

	Method-2: Optimize the above solution to quadratic complexity.
Pseudo Code:
for i in range(0,n):
    sum=0
    for j in range(i,n):
        sum+=arr[j]
        maxi=max(maxi,sum)
	
	Method-3: Kadane's algorithm; Dynamic Programming
	TC: O(n); SC: O(1)
The idea of Kadaneâ€™s algorithm is to look for all positive contiguous segments of the array using the variable max_ending_here.
To keep track of maximum sum continuous segment among all positive segments, max_so_far is used. 
Each time we get a positive-sum compare it with max_so_far and update max_so_far if it is greater than max_so_far.
Code:
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_ending_here=0
        max_so_far=nums[0]
        for i in nums:
            max_ending_here += i
            if(max_so_far < max_ending_here):
                max_so_far = max_ending_here
            if(max_ending_here < 0):
                max_ending_here = 0
        return max_so_far
