22)  Largest Subarray with 0 sum
P: https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1

I/P: arr = [15, -2, 2, -8, 1, 7, 10, 13]; n=8
O/P: 5

Method-1: TC: O(n^2); SC: O(1)
Consider all sub-arrays one by one and check the sum of every sub-array.
Run two loops: the outer loop picks the starting point i and the inner loop tries all sub-arrays starting from i.
Code:
def maxLen(arr,n):
    max_len = 0 
    for i in range(len(arr)):
        curr_sum = 0
        for j in range(i, len(arr)):         
            curr_sum += arr[j] 
            if curr_sum == 0:
                max_len = max(max_len, j-i + 1) 
    return max_len

Method-2: TC: O(n); SC: O(n)
The sum-index pair will be stored in a hash-map. 
A Hash map allows insertion and deletion of key-value pair in constant time. 
Therefore, the time complexity remains unaffected. 
So,if the same value appears twice in the array,it will be guaranteed that the array will be a zero-sum sub-array. 

Algorithm:  

1. Create an extra space, an array of length n (prefix), a variable (sum), length (max_len), 
   and a hash map (hm) to store the sum-index pair as a key-value pair.
2. Move along the input array from the start to the end.
3. For every index, update the value of sum = sum + array[i].
4. Check every index, if the current sum is present in the hash map or not.
5. If present, update the value of max_len to a maximum difference of two indices (current index and index in the hash-map) and max_len.
6. Else, put the value (sum) in the hash map, with the index as a key-value pair.
7. Print the maximum length (max_len).

Code:
def maxLen(arr,n):
	hash_map = {}
	max_len = 0
	curr_sum = 0
	for i in range(n):
		curr_sum += arr[i]
		if(arr[i]==0 and max_len==0):
			max_len = 1
		if curr_sum in hash_map:
			max_len = max(max_len, i - hash_map[curr_sum])
		else:
			hash_map[curr_sum] = i
	return max_len

arr = [15, -2, 2, -8, 1, 7, 10, 13]
n=len(arr)
print("Length of the longest 0 sum subarray is % d" % maxLen(arr,n))
