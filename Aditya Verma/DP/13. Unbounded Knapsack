13) Unbounded Knapsack

Unbounded Knapsack (Repetition of items allowed)
Given a knapsack weight W and a set of n items with certain value vali and weight wti, 
we need to calculate minimum amount that could make up this quantity exactly. 

This is different from classical Knapsack problem, here we are allowed to use unlimited number  of instances of an item.

Examples:

Input : W = 100
       val[]  = {1, 30}
       wt[] = {1, 50}
Output : 100
There are many ways to fill knapsack.
1) 2 instances of 50 unit weight item.
2) 100 instances of 1 unit weight item.
3) 1 instance of 50 unit weight item and 50
   instances of 1 unit weight items.
We get maximum value with option 2.

PROBLEM STATEMENT LINK: https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/

In bounded 01 Knapsack, once a decision is made on an item(take or not take), its done.
In unbounded Knapsack, multiple occurences of same item is allowed.
If for a item, we take it, there is a chance that we might take it again.
But for an item we reject it, we reject it forever.

The initialization for bounded 01 Knapsack and unbounded Knapsack are the same.
We initialize the first row and first column with 0s in the array t[n+1][wt+1].

01 Knapsack code:
if( wt[i-1] <= j ){
    t[i][j] = max( val[i-1] + t[i-1][ j - wt[i-1]] , t[i-1][j]);
}
else{
    t[i][j] = t[i-1][j];
}

Unbounded Knapsack code:
if( wt[i-1] <= j ){
    t[i][j] = max( val[i-1] + t[i][ j - wt[i-1]] , t[i-1][j]);
}
else{
    t[i][j] = t[i-1][j];
}
Just a minor change in line 42 t[i][...] as even if we take an item, we can again take it.
