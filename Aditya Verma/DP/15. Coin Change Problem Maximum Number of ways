15) Coin Change Problem Maximum Number of ways
Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins, 
how many ways can we make the change? The order of coins doesnâ€™t matter.
Example:
for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4.

PROBLEM STATEMENT LINK: https://www.geeksforgeeks.org/coin-change-dp-7/

Why is this problem Knapsack?
1) For every coin, we are having a choice whether to select it or not.
And we have to find the maximum number of ways.

So this is knapsack. Each coin can be selected any number of times. So this is Unbounded Knapsack.
Matching:
In Knapsack -> Here
wt[] -> coin[]
W -> sum

Subset Sum:
if( arr[i-1]<=j ){
    t[i][j] = t[i-1][j-arr[i-1]] || t[i-1][j];
}
else{
    t[i][j] = t[i-1][j];
}
Count of Subset Sum:
if( arr[i-1]<=j ){
    t[i][j] = t[i-1][j-arr[i-1]] + t[i-1][j];
}
else{
    t[i][j] = t[i-1][j];
}

When asked the COUNT/ # OF WAYS, we use the "+" operator.

Coin change problem:
if( coin[i-1]<=j ){
    t[i][j] = t[i-1][j-coin[i-1]] + t[i-1][j];
}
else{
    t[i][j] = t[i-1][j];
}
Initialization:
In t[0][0], store 1 as If we select no elements from the array,i.e. {}, then sum=0 and count=1.
In t[2][0], considering first 2 elements in the array, it is possible to get a sum of 0 as we can take {} and count=1.
So, in the whole first column, we store 1.
In t[0][1] i.e. when no elements are there in the array, it is impossible to get a sum of 2. So count=0.
So in the whole first row except the first element t[0][0], we mark 0.

Initialization is same as that of 9) Count of subsets sum with a Given sum.
