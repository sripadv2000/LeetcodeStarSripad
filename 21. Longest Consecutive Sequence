21) Longest Consecutive Sequence
P: https://leetcode.com/problems/longest-consecutive-sequence/
Method-1:
Sort the array and make use of some if else statements to find the largest length.
TC: O(nlogn)+O(n); SC: O(n) if merge sort is used.
Code:
class Solution:
    def longestConsecutive(self, nums):
        if not nums:
            return 0

        nums.sort()

        longest_streak = 1
        current_streak = 1

        for i in range(1, len(nums)):
            if nums[i] != nums[i-1]:
                if nums[i] == nums[i-1]+1:
                    current_streak += 1
                else:
                    longest_streak = max(longest_streak, current_streak)
                    current_streak = 1

        return max(longest_streak, current_streak)
Method-2:
First place all the elements of the array in a hashset.
For each element a[i], check whether (a[i]-1) exists in the hashset or not.
If it exists, then move on to next element.
If it does'nt exists, then for that element, keep checking for the next elements and
increase the length variable till elements are found in hashset.
Keep track of all the lengths of sequences and finally print the longest one.
TC: O(n)+O(n)+O(n); SC: O(n) for set.
class Solution:
    def longestConsecutive(self, nums):
        longest_streak = 0
        num_set = set(nums) #O(n)

        for num in num_set:
            if num - 1 not in num_set:
                current_num = num
                current_streak = 1

                while current_num + 1 in num_set:
                    current_num += 1
                    current_streak += 1

                longest_streak = max(longest_streak, current_streak)

        return longest_streak
