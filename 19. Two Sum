19) Two Sum
	P: https://leetcode.com/problems/two-sum/
	Method-1: Brute Force TC: O(n^2) ;SC: O(1)
Code:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        for i in range(n):
            for j in range(i+1,n):
                if(nums[j] == target-nums[i]):
                    return [i]+[j]
Method-2: Using map TC: O(n) ;SC: O(n)
We use a hashtable in this approach. Containing (element,index).
First, take an element a[i] and check whether target-a[i] is there in the hashtable.
If yes, return the indices. Else, store the (a[i],index) in the hashtable.
Code:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        dic = {}
        for i, x in enumerate(nums):
            if target - x in dic:
                return [dic[target - x], i]
            dic[x] = i
