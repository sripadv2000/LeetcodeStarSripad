19) Two Sum
	P: https://leetcode.com/problems/two-sum/
	Method-1: Brute Force TC: O(n^2) ;SC: O(1)
Code:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        for i in range(n):
            for j in range(i+1,n):
                if(nums[j] == target-nums[i]):
                    return [i]+[j]
Method-2: Using map TC: O(n) ;SC: O(n)
We use a hashtable in this approach. Containing (index,element).
First, take an element a[i] and check whether target-a[i] is there in the hashtable.
If yes, return the indices of the element in hashmap and the current element. Else, store the (index,a[i]) in the hashtable.
There is definitely one and only solution in the array.(lets say ele1 and ele2)
So while searching in the hashmap, for ele1, ele2 is not still there in the hashmap. For ele2, we will find target-ele2 thet is ele1 in the hashmap.
So the hashmap always stores the previous values in it.
Code:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        prevMap = {} # val : index
        for i, n in enumerate(nums):
	    diff = target - n
            if diff in prevMap:
                return [prevMap[diff], i]
            prevMap[x] = i
